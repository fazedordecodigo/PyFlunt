[project]
name = "Flunt"
version = "3.0.0"
description = "Python implementation of Domain Notification Pattern inspired by Flunt (.NET)"
authors = [ {name = "Emerson Delatorre", email = "contato@delatorre.dev" }]
maintainers = [ {name = "Emerson Delatorre", email = "contato@delatorre.dev" }]
license = "MIT"
readme = "./docs/README.md"
requires-python = ">=3.11"
keywords = [
  "notifications",
  "python",
  "ddd",
  "python3",
  "validations",
  "notification",
  "ddd-patterns",
  "ddd-architecture",
  "validation-library",
  "class-validator",
  "fluentvalidation",
  "class-validation",
  "flunt",
  "domain-notification",
  "class-validator-cpf"
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Office/Business",
  "Topic :: Utilities",
  "Topic :: Software Development",
  "Topic :: Software Development :: Internationalization",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Natural Language :: English",
  "Natural Language :: Portuguese",
  "Natural Language :: Portuguese (Brazilian)"
]

dependencies = []


[project.urls]
Repository = "https://github.com/fazedordecodigo/PyFlunt"
Documentation = "https://github.com/fazedordecodigo/PyFlunt"
Homepage = "https://github.com/fazedordecodigo/PyFlunt"
Changelog = "https://github.com/fazedordecodigo/PyFlunt/releases"
Tracker = "https://github.com/fazedordecodigo/PyFlunt/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
  { include-group = "linter" },
  { include-group = "pkg-meta" },
  { include-group = "test" },
  { include-group = "type" },
]

test = [
  "faker>=35.2.0",
  "pytest>=8.3.4",
  "pytest-cov>=6.0.0",
]

type = [ "mypy>=1.15.0", { include-group = "test" } ]

linter = [
  "ruff>=0.9.6",
  "pre-commit>=4.1.0",
  "pre-commit-hooks>=5.0.0",
  "pre-commit-uv>=4.1.4"
]

pkg-meta = [ "uv>=0.5.30" ]

[project.scripts]
sample = "samples.flunt_sample:main"

[tool.pytest.ini_options]
pythonpath = ["flunt"]
testpaths = ["tests"]
python_files = "test*.py"
python_classes = "Test"
python_functions = "test"
addopts = "--tb=native"
console_output_style = "classic"
junit_duration_report = "call"
filterwarnings = "ignore::RuntimeWarning"

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["flunt"]

[tool.ruff]
line-length = 79
indent-width = 4
target-version = "py311"
fix = true

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 59
preview = true

[tool.ruff.lint]
unfixable = []
select = [
  "F",              # pyflakes
  "E", "W", "D",    # pycodestyle
  "I",              # isort
  "N",              # flake8-naming
  "UP",             # pyupgrade
  "YTT",            # flake8 2020
  "ASYNC",          # flake8-async
  "B",              # flake8-bugbear
  "C4",             # flake8-comprehensions
  "DTZ",            # flake8-datatimez
  "T10",            # flake8-debugger
  "LOG",            # flake8-logging
  "G",              # flake8-logging-format
  "PIE",            # flake8-pie
  "T20",            # flake8-print
  "PYI",            # flake8-pyi
  "PT",             # flake8-pytest-style
  "Q",              # flake8-quotes
  "RSE",            # flake8-raise
  "RET",            # flake8-return
  "SLF",            # flake8-self
  "SLOT",           # flake8-slots
  "TID",            # flake8-tidy-imports
  "TCH",            # flake8-type-checking
  "INT",            # flake8-gettext
  "ARG",            # flake8-unused-arguments
  "PTH",            # flake8-use-pathlib
  "TD",             # flake8-todos
  "PL",             # pylint
  "UP",             # pyupgrade
  "RUF",            # ruff
  "TRY",            # tryceratops
]
ignore = [
  "D100",           # Missing docstring in public module
  "D103",           # Missing docstring in public function
  "D104",           # Missing docstring in public package
  "D203",           # 1 blank line required before class docstring
  "D206",           # 1 blank line required before class docstring
  "D212",           # Multi-line docstring summary should start at the first line
  "D417",           # Missing argument descriptions in the docstring
  "E501",           # Line too long
  "G004",           # Logging statement uses string formatting
  "TD004",          # Found TODO in code
  "TD003",          # Found FIXME in code
  "W191",           # Indentation contains tabs
  "PLE1205"         # Use of the `print` function
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "S101",          # Use of `assert` detected
  "S603"           # Use of `assertRaises` detected
]

[tool.mypy]
files = ['flunt']
check_untyped_defs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
show_error_codes = true
warn_return_any = true
warn_unused_ignores = true

[tool.uv]
cache-keys = [ { file = "pyproject.toml" }, { git = true } ]
